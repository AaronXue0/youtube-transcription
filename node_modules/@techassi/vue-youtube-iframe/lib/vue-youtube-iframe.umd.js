// Copyright (c) 2020-present Techassi
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
// vue-youtube-iframe 1.0.6 build 21/3/2021
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
    typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.VueYoutubeIframe = {}, global.vue));
}(this, (function (exports, vue) { 'use strict';

    const HOST_COOKIE = 'https://www.youtube.com';
    const HOST_NO_COOKIE = 'https://www.youtube-nocookie.com';

    function seekIfAutoplay(player, playerVars) {
        if (playerVars.autoplay != undefined && playerVars.autoplay == 1) {
            player.mute();
            if (playerVars.start != undefined && playerVars.start != 0) {
                player.seekTo(playerVars.start, true);
            }
            else {
                player.playVideo();
            }
        }
    }

    class Manager {
        constructor() {
            this.players = new Array();
            this.uid = 0;
        }
        registerFactory(factory) {
            this.factory = factory;
        }
        register(callback) {
            this.uid++;
            if (this.factory != undefined) {
                callback(this.factory, `vue-youtube-iframe-${this.uid}`);
                return;
            }
            this.players.push(callback);
        }
        runQueue() {
            this.players.forEach((callback) => {
                if (this.factory != undefined) {
                    this.uid++;
                    callback(this.factory, `vue-youtube-iframe-${this.uid}`);
                }
                this.players = [];
            });
        }
    }
    function createManager() {
        return new Manager();
    }
    const manager = createManager();

    const player = vue.defineComponent({
        name: 'YoutubeIframe',
        props: {
            playerWidth: {
                type: [String, Number],
                default: 1280,
            },
            playerHeight: {
                type: [String, Number],
                default: 720,
            },
            playerParameters: {
                type: Object,
                default: () => ({
                    autoplay: 0,
                    time: 0,
                    mute: 0,
                }),
            },
            videoId: {
                type: String,
                default: '',
            },
            noCookie: {
                type: Boolean,
                default: false,
            },
        },
        emits: ['ready', 'error', 'state-change'],
        data() {
            return {
                elementId: '',
                playerInstance: {},
            };
        },
        render() {
            return vue.h('div', { class: ['vue-youtube-iframe'] }, [vue.h('div', { id: this.elementId })]);
        },
        mounted() {
            manager.register((factory, uid) => {
                const host = this.noCookie ? HOST_NO_COOKIE : HOST_COOKIE;
                this.elementId = uid;
                vue.nextTick().then(() => {
                    this.playerInstance = createPlayer(factory, this.elementId, {
                        width: this.playerWidth,
                        height: this.playerHeight,
                        playerVars: {
                            ...this.playerParameters,
                        },
                        videoId: this.videoId,
                        host,
                        events: {
                            onReady: (event) => {
                                seekIfAutoplay(event.target, this.playerParameters);
                                this.$emit('ready', event);
                            },
                            onStateChange: (event) => {
                                if (event.data !== -1) {
                                    this.$emit('state-change', event);
                                }
                            },
                            onError: (event) => {
                                this.$emit('error', event);
                            },
                        },
                    });
                });
            });
        },
        unmounted() {
            this.playerInstance.destroy();
        },
        methods: {
            cueVideoById(videoId, startSeconds, suggestedQuality) {
                this.playerInstance.cueVideoById(videoId, startSeconds, suggestedQuality);
            },
            loadVideoById(videoId, startSeconds, suggestedQuality) {
                this.playerInstance.loadVideoById(videoId, startSeconds, suggestedQuality);
            },
            cueVideoByUrl(mediaContentUrl, startSeconds, suggestedQuality) {
                this.playerInstance.cueVideoByUrl(mediaContentUrl, startSeconds, suggestedQuality);
            },
            loadVideoByUrl(mediaContentUrl, startSeconds, suggestedQuality) {
                this.playerInstance.loadVideoByUrl(mediaContentUrl, startSeconds, suggestedQuality);
            },
            cuePlaylist(playlist, index, startSeconds, suggestedQuality) {
                this.playerInstance.cuePlaylist(playlist, index, startSeconds, suggestedQuality);
            },
            loadPlaylist(playlist, index, startSeconds, suggestedQuality) {
                this.playerInstance.loadPlaylist(playlist, index, startSeconds, suggestedQuality);
            },
            playVideo() {
                this.playerInstance.playVideo();
            },
            pauseVideo() {
                this.playerInstance.pauseVideo();
            },
            stopVideo() {
                this.playerInstance.stopVideo();
            },
            seekTo(seconds, allowSeekAhead) {
                this.playerInstance.seekTo(seconds, allowSeekAhead);
            },
            nextVideo() {
                this.playerInstance.nextVideo();
            },
            previousVideo() {
                this.playerInstance.previousVideo();
            },
            playVideoAt(index) {
                this.playerInstance.playVideoAt(index);
            },
            mute() {
                this.playerInstance.mute();
            },
            unMute() {
                this.playerInstance.unMute();
            },
            isMuted() {
                return this.playerInstance.isMuted();
            },
            setVolume(volume) {
                this.playerInstance.setVolume(volume);
            },
            getVolume() {
                return this.playerInstance.getVolume();
            },
            setSize(width, height) {
                this.playerInstance.setSize(width, height);
            },
            getPlaybackRate() {
                return this.playerInstance.getPlaybackRate();
            },
            setPlaybackRate(suggestedRate) {
                this.playerInstance.setPlaybackRate(suggestedRate);
            },
            getAvailablePlaybackRates() {
                return this.playerInstance.getAvailablePlaybackRates();
            },
            setLoop(loopPlaylists) {
                this.playerInstance.setLoop(loopPlaylists);
            },
            setShuffle(shufflePlaylist) {
                this.playerInstance.setShuffle(shufflePlaylist);
            },
            getVideoLoadedFraction() {
                return this.playerInstance.getVideoLoadedFraction();
            },
            getPlayerState() {
                return this.playerInstance.getPlayerState();
            },
            getCurrentTime() {
                return this.playerInstance.getCurrentTime();
            },
            getPlaybackQuality() {
                return this.playerInstance.getPlaybackQuality();
            },
            setPlaybackQuality(suggestedQuality) {
                this.playerInstance.setPlaybackQuality(suggestedQuality);
            },
            getAvailableQualityLevels() {
                return this.playerInstance.getAvailableQualityLevels();
            },
            getDuration() {
                return this.playerInstance.getDuration();
            },
            getVideoUrl() {
                return this.playerInstance.getVideoUrl();
            },
            getVideoEmbedCode() {
                return this.playerInstance.getVideoEmbedCode();
            },
            getPlaylist() {
                return this.playerInstance.getPlaylist();
            },
            getPlaylistIndex() {
                return this.playerInstance.getPlaylistIndex();
            },
            getIframe() {
                return this.playerInstance.getIframe();
            },
        },
    });
    function createPlayer(factory, id, options) {
        return new factory.Player(id, options);
    }

    const plugin = {
        install(app) {
            const tag = document.createElement('script');
            tag.src = 'https://www.youtube.com/player_api';
            const firstScriptTag = document.getElementsByTagName('script')[0];
            if (firstScriptTag.parentNode != null) {
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                app.component('youtube-iframe', player);
                window.onYouTubeIframeAPIReady = () => {
                    manager.registerFactory(window.YT);
                    manager.runQueue();
                };
            }
        },
    };

    exports.Player = player;
    exports.default = plugin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
